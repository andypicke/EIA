---
title: "State Electricity Generation By Fuel Type"
author: "Andy Pickering"
format: 
  html:
    code-link: true
    code-fold: show
date: "2023-07-11"
categories: [energy, EIA, R, visualization, API]
draft: true
---

## Introduction

Electricity generation is a major source of carbon emissions, and tranisitioning to cleaner and/or renewable sources of power generation is important to lowering greenhouse gas emissions and limiting the effects of climate change (as well as other benefits such as improving air quality). With the increase in electirication (such as electric vehicles and heat pumps), transitioning to lower-carbon sources of electricity generation is even more important.

In general electric vehicles produce less net emissions than traditional gas-powered vehicles, but the savings depends on several factors including how the electricity used to charge an EV is produced. The [Alternative Fuels Data Center](https://afdc.energy.gov/) has a nice [tool](https://afdc.energy.gov/vehicles/electric_emissions.html) showing the breakdown of electricity generation fuel sources by state and the resulting effects on emissions.

I am interested in analyzing trends in electricity generation fuel sources, and this post outlines the first step: Using data from the [EIA](https://www.eia.gov/opendata/) to calculate and reproduce the state-level breakdown in the [AFDC tool](https://afdc.energy.gov/vehicles/electric_emissions.html).

Some of the technical methods/topics involved in this include:

-   Retrieving data from an API

-   Pivoting dataframes between *long* and *wide* formats

-   Plotting data using ggplot2 and plotly

```{r}
#| code-fold: true
library(httr)
library(jsonlite)
library(ggplot2)
theme_set(theme_grey(base_size = 15))
suppressPackageStartupMessages(library(dplyr))

```

I'm going to make a simple little function to retrieve data from the API, that will make things a little tidier and warn me if the API call returns an error code.

```{r}

retrieve_api_data <- function(api_path){
  
  response_raw <- httr::GET(url=complete_api_path)
  
  if (response_raw$status_code!=200){
    print(paste("Warning, API returned error code ",response_raw$status_code))
  }
  
  return(response_raw)
  
}

```

The data I will use is from the EIA API. It is the annual electric power generation by state:

-   electricity

-   electric-power-operational-data

-   generation

```{r}

# API key stored in .Renviron
api_key <- Sys.getenv("EIA_KEY")

# base url for EIA API V2
api_base <- "https://api.eia.gov/v2/"

route <- 'electricity'
subroute <- "electric-power-operational-data"
data_name <- 'generation'

state <- 'CO'

# was using sector id 1 (electric utilities), but 
# **sector id 98= electric power (gives results much closer to https://afdc.energy.gov/vehicles/electric_emissions.html)

sector_id <- 98

# annual
complete_api_path <- paste0(api_base,route,'/',subroute,'/','data/','?frequency=annual&data[0]=',data_name,'&facets[sectorid][]=',sector_id,'&facets[location][]=',state,'&api_key=',api_key)

response_raw <- retrieve_api_data(complete_api_path)

dat <- jsonlite::fromJSON(httr::content(response_raw,"text"))
#str(dat)


df <- dat$response$data
df$year <- df$period
df <- df %>% select(-c(period,stateDescription))
head(df)
```

## Plot total electricity generation by fuel type

```{r}

df %>% 
  filter(fueltypeid %in% c('ALL','COW','SUN','WND','NG')) %>% 
  ggplot(aes(year,generation,group=fueltypeid))+
  geom_line(aes(color=fueltypeid),linewidth=1.5)+
#  geom_smooth(aes(color=fueltypeid))+
  xlab("Year")+
  ylab(paste0('Generation [',df$`generation-units`[1],']'))+
  ggtitle("Electricty Generation in CO by Fuel Type")

```

## Compute percent of total generation by fuel type

Now I want to compute the percent of total generation that each fuel type makes up. Currently the dataframe has a row for each year and fuel type. To make it easier to compute, I need to pivot the data frame to a wide format, so there is one row for each year and a column for each fuel type. Then I can simply divide the value for each fuel type by the total.

::: {.callout-note}
You may be familiar with the *pivot* functions under different names. In the *tidyr* package, *pivot_wider* and *pivot_longer* are newer versions of *spread* and *gather*, respectively.
:::

```{r}

df_wide <- df %>% 
  select(year,location,generation,fueltypeid) %>% 
  tidyr::pivot_wider(names_from = fueltypeid, values_from = generation) 

head(df_wide)
```

Compute percent of total for fuel types

```{r}

df_perc <- df_wide %>% 
  mutate(perc_SUN=round(SUN/ALL*100,2),
         perc_WND=round(WND/ALL*100,2),
         perc_COW=round(COW/ALL*100,2),
         perc_NG=round(NG/ALL*100,2),
         perc_HYD=round((HPS+HYC)/ALL*100,2),
         perc_BIO=round(BIO/ALL*100),2) %>% 
  select(year,location,starts_with('perc_'))
  
head(df_perc)


```

Now that I've computed the percent for each fuel type, I want to pivot back to a long format that will make plotting easier.

```{r}

df_perc_long <- df_perc %>% 
  tidyr::pivot_longer(cols = starts_with('perc_'))

head(df_perc_long)

```

## Timeseries Plot

```{r}

df_perc_long %>% 
  ggplot(aes(year,value,group=name))+
  geom_line(aes(color=`name`),linewidth=1.5)+
  xlab('Year')+
  ylab("Percent of Total Generation")

```

# ggplot piechart

try to recreate pie chart of percent of fuel types for generation?

```{r}

df_perc_long %>% 
  filter(year=="2021") %>% 
  ggplot(aes(x="",y=value,fill=name))+
  geom_bar(stat="identity", width=1) +
  coord_polar("y", start=0) +
  theme_void()+
  geom_text(aes(label = paste0(round(value), "%")),
            position = position_stack(vjust=0.5)) +
  labs(x = NULL, y = NULL, fill = NULL)



```

# Plotly version

```{r}

suppressPackageStartupMessages(library(plotly))

data <- df_perc_long %>% 
  filter(year=="2021") 

fig <- plot_ly(data, labels = ~name, values = ~value, type = 'pie')
fig <- fig %>% layout(title = 'Electricity Generation By Fuel Type for Colorado 2021',
         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))

fig

```

Would a bar chart be better?

```{r}

df_perc_long %>% 
  filter(year=="2021") %>% 
  mutate(name=forcats::fct_reorder(name,value)) %>% 
  ggplot(aes(name,value))+
  geom_col(aes(fill=name))+
  xlab("Fuel Type")+
  ylab("Percent of Total Electric Generation")+
  coord_flip()



```

# Session Info

```{r}
sessionInfo()
```
