---
title: "State Electricity Generation By Fuel Type"
author: "Andy Pickering"
format: 
  html:
    code-link: true
    code-fold: show
date: "2023-07-11"
categories: [energy, EIA, R, visualization, API]
draft: true
bibliography: references.bib
---

# Introduction

Electricity generation is a major source of carbon emissions, and tranisitioning to cleaner and/or renewable sources of power generation is important to lowering greenhouse gas emissions and limiting the effects of climate change (as well as other benefits such as improving air quality). With the increase in electirication (such as electric vehicles and heat pumps), transitioning to lower-carbon sources of electricity generation is even more important.

In general electric vehicles produce less net emissions than traditional gas-powered vehicles, but the savings depends on several factors including how the electricity used to charge an EV is produced. The [Alternative Fuels Data Center](https://afdc.energy.gov/) has a nice [tool](https://afdc.energy.gov/vehicles/electric_emissions.html) showing the breakdown of electricity generation fuel sources by state and the resulting effects on emissions.

I am interested in analyzing trends in electricity generation fuel sources, and this post outlines the first step: Using data from the [EIA](https://www.eia.gov/opendata/) to calculate and reproduce the state-level breakdown in the [AFDC tool](https://afdc.energy.gov/vehicles/electric_emissions.html).

Some of the technical methods/topics involved in this include:

-   Retrieving data from an API

-   Pivoting data between *long* and *wide* formats

-   Plotting data using the ggplot2 [@ggplot2] and plotly [@plotly] packages

```{r Load Libraries}
#| code-fold: true
library(httr)
library(jsonlite)
library(ggplot2)
theme_set(theme_grey(base_size = 15))
suppressPackageStartupMessages(library(dplyr))
library(forcats)
suppressPackageStartupMessages(library(plotly))
library(DT)

```

I'm going to make a simple little function to retrieve data from the API, that will make things a little tidier and warn me if the API call returns an error code.

```{r}

retrieve_api_data <- function(api_path){
  
  response_raw <- httr::GET(url=complete_api_path)
  
  if (response_raw$status_code!=200){
    print(paste("Warning, API returned error code ",response_raw$status_code))
  }
  
  return(response_raw)
  
}

```

The data I will use is the annual electric power generation by state from the [EIA API](https://www.eia.gov/opendata/browser/). I'm going to just look at data for Colorado for now, and I'm looking at sector id 98: electric power.

```{r}

# API key stored in .Renviron
api_key <- Sys.getenv("EIA_KEY")

# base url for EIA API V2
api_base <- "https://api.eia.gov/v2/"

route <- 'electricity'
subroute <- "electric-power-operational-data"
data_name <- 'generation'

state <- 'CO'

# sectorid 98= electric power 
sector_id <- 98

# annual
complete_api_path <- paste0(api_base,route,'/',subroute,'/','data/',
                            '?frequency=annual&data[0]=',data_name,
                            '&facets[sectorid][]=',sector_id,
                            '&facets[location][]=',state,
                            '&api_key=',api_key)

response_raw <- retrieve_api_data(complete_api_path)

dat <- jsonlite::fromJSON(httr::content(response_raw,"text"))

df <- dat$response$data

df <- df %>% rename(year=period) %>% 
  select(-c(location,sectorid,sectorDescription,stateDescription))

head(df)
```

Note that some of the *fueltype* categories are subsets of, or overlap with, other categories. For example *COW* is all coal products, which includes SUB (subbituminous coal) and BIT (bituminous coal). For this analysis I will look at the following categories:

-   ALL

-   COW (all coal)

-   Natural Gas

-   WND : Wind

-   SUN : Solar

-   HYC: conventionalÂ hydroelectric

-   BIO: Biomass

    Not*e* CO currently has no nuclear production but other states may include this.

```{r}

df <- df %>% 
  filter(fueltypeid %in% c('ALL','FOS','REN','COW','SUN','WND','NG','HYC','BIO','HPS'))


```

# Plot total electricity generation by fuel type

```{r}

df %>% 
  filter(fueltypeid %in% c('ALL','COW','NG','SUN','WND','HYC')) %>% 
  ggplot(aes(year,generation,group=fuelTypeDescription))+
  geom_line(aes(color=fuelTypeDescription),linewidth=1.5)+
  xlab("Year")+
  ylab(paste0('Generation [',df$`generation-units`[1],']'))+
  ggtitle(paste0("Electricity Generation in ",state," by Fuel Type"))

```

# Compute percent of total generation by fuel type

Now I want to compute the percent of total generation that each fuel type makes up. Currently the dataframe has a row for each year and fuel type. To make it easier to compute, I need to pivot the data frame to a wide format, so there is one row for each year and a column for each fuel type. Then I can simply divide the value for each fuel type by the total.

::: callout-note
You may be familiar with the *pivot* functions under different names. In the *tidyr* package, *pivot_wider* and *pivot_longer* are newer versions of *spread* and *gather*, respectively.
:::

Pivot to wider format:

```{r}

df_wide <- df %>% 
  select(year,generation,fueltypeid) %>% 
  tidyr::pivot_wider(names_from = fueltypeid, values_from = generation) 

head(df_wide)
```

Compute percent of total for fuel types:

```{r}

df_perc <- df_wide %>% 
  mutate(perc_Solar=round(SUN/ALL*100,2),
         perc_Wind=round(WND/ALL*100,2),
         perc_Coal=round(COW/ALL*100,2),
         perc_NaturalGas=round(NG/ALL*100,2),
         perc_Hydro=round((HPS+HYC)/ALL*100,2),
         perc_Biomass=round(BIO/ALL*100,2),) %>% 
  select(year,starts_with('perc_'))
  
head(df_perc)


```

Now that I've computed the percent for each fuel type, I want to pivot back to a long format that will make plotting easier:

```{r}

df_perc_long <- df_perc %>% 
  tidyr::pivot_longer(cols = starts_with('perc_'),
                      names_prefix = 'perc_',
                      names_to = 'FuelType',
                      values_to = 'percent')

head(df_perc_long)

```

# 2021 Breakdown by fuel type

First I want to see if I can re-create the values and pie chart from the [AFDC tool](https://afdc.energy.gov/vehicles/electric_emissions.html) for Colorado, which uses [2021 data from EIA](https://afdc.energy.gov/vehicles/electric_emissions_sources.html) :

![Breakdown of electricity generation by fuel type for Colorado 2021 from AFDC tool](Screenshot 2023-07-14 at 10.07.45 AM.png)

```{r}
#| code-fold: true

afdc_co_2021 <- tibble(FuelType=c('Solar','Wind','Coal','NaturalGas',
                                    'Hydro','Biomass'),
                       AFDC_perc=c(4.82,26.24,40.96,24.94,2.69,0.29))

df_perc_long %>% 
  filter(year=="2021") %>% 
  left_join(afdc_co_2021) %>% 
  DT::datatable()

```

The results are not exactly the same, but are very close. I'm not sure if this is due to my methods, or if the data I am using is slightly different or has been updated.

## Pie chart using ggplot2

```{r}

df_perc_long %>% 
  filter(year=="2021") %>% 
  ggplot(aes(x="",y=percent,fill=FuelType))+
  geom_bar(stat="identity", width=1) +
  coord_polar("y", start=0) +
  theme_void()+
  geom_text(aes(label = paste0(round(percent,2), "%")),
            position = position_stack(vjust=0.5)) +
  labs(x = NULL, y = NULL, fill = NULL)



```

## Pie chart using Plotly

I found that I was able to easily make a little bit nicer-looking and interactive chart with plotly :

```{r}

data <- df_perc_long %>% 
  filter(year=="2021") 

fig <- plot_ly(data, labels = ~FuelType, values = ~percent, type = 'pie')
fig <- fig %>% layout(title = 'Electricity Generation By Fuel Type for Colorado 2021',
         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))

fig

```

## Would a bar chart be better?

In general, I'm not a huge fan of piecharts; it can be difficult to judge the relative values (areas) of the different segments. So I thought I'd try displaying the data as a bar chart too.

::: callout-tip
If you want the bars to plot in order by their values, you can use the *fct_reorder* function from the *forcats* library [@forcats] to re-order the factor levels.
:::

```{r}

df_perc_long %>% 
  filter(year=="2021") %>% 
  mutate(FuelType=forcats::fct_reorder(FuelType,percent)) %>% 
  ggplot(aes(FuelType,percent))+
  geom_col(aes(fill=FuelType))+
  xlab("Fuel Type")+
  ylab("Percent of Total Electric Generation")+
  ggtitle("% of Electric Generation by Fuel Type (CO 2021)")+
  coord_flip()

```

# Timeseries Plot

After verifying that my calculations look reasonable for 2021, we can start to look at how the fuel mix has changed over time. Some takeaways from the timeseries plot below:

-   The fraction of coal has been steadily decreasing and is about half what it was in 2000.

-   At the same time, natural gas and wind have been increasing.

```{r}

df_perc_long %>% 
  ggplot(aes(year,percent,group=FuelType))+
  geom_line(aes(color=`FuelType`),linewidth=1.5)+
  xlab('Year')+
  ylab("Percent of Total Generation")

```

Some of the next steps I am interested in looking at include:

-   Extending these calculations and analysis to other states

-   Investigating trends over time

-   Looking at how emissions have changed alongside changes in fuel mix.

# Session Info

```{r}
sessionInfo()
```
